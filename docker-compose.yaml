version: "3.6"

services:

  #######################################################
  ##    Voice
  #######################################################

  # Voice produce service - generates wav/mp3 file with voiced phrases.
  # Example: http://localhost:7050/say?text=крутая+озвучка&voice=anna
  # RHVoice available voice names:
  # alan            # English
  # aleksandr|anna  # Russian
  # anatol|natalia  # Ukrainian
  rhvoice-rest:
    build: speech/rhvoice-rest
    ports:
      - 7050:8080
    restart: on-failure

  # Voice recognition service - converts given audio to text
  vosk-api:
    build:
      context: speech/vosk-api
      # Image build params
      args:
        # Models from: https://alphacephei.com/vosk/models
        # Examples: vosk-model-small-ru-0.4 (~39Mb) | vosk-model-ru-0.10.zip (~2.5Gb)
        MODEL_NAME: vosk-model-small-ru-0.4
        # Vosk API release version from: https://github.com/alphacep/vosk-api/releases
        VOSK_API_VERSION: 0.3.15
    ports:
      - 8086:8086

  # Voice listener service - send audio from microphone to recognition service
  listener:
    build: speech/listener
    environment:
      VOSK_API_URL: http://127.0.0.1:8086
      MICROPHONE_DEVICE_INDEX: -1 # -1 for auto
      SAMPLE_RATE: 16000
      PHRASE_TIME_LIMIT_SEC: 10
    restart: on-failure

  # Speaker service - plays sounds (using VLC player).
  # It sends request to voice produce service and plays received wav/mp3 file.
  # Example: http://localhost:8050/say?text=класна+озвучка&lang=uk
  # Supported languages: uk, ru, en
  # Important! To hear the sound, connect your device to speakers or headphones.
  # In Windows or MacOS you could run this service manually without Docker: pip install -r requirements.txt && python main.py
  speaker:
    build: speech/speaker
    ports:
      - 8050:8080
    environment:
      RHVOICE_API_URL: http://rhvoice-rest:8080
      CONFIG_API_URL: http://config-provider:8080
    devices:
      # This service uses sound device in Linux, so it won't run in Windows or MacOS.
      - /dev/snd
    depends_on:
      - rhvoice-rest
      - config-provider
    restart: on-failure

  #######################################################
  ##    Core services
  #######################################################

  # CouchDB database.
  # Stores other services configurations.
  # UI address: http://localhost:5984/_utils
  couchdb:
    image: couchdb:3.1
    environment:
      COUCHDB_USER: admin
      COUCHDB_PASSWORD: admin
    volumes:
      - couchdb_data:/opt/couchdb/data
    ports:
      - 5984:5984
    restart: on-failure

  # Store and provide configuration for all applications
  # Example to store default configs or get existing:
  # POST http://localhost:8010/config/init/MY_APP_NAME  BODY: {"my_prop1: "value1", "my_prop2": "value2"}
  config-provider:
    build: config-provider
    ports:
      - 8010:8080
    environment:
      DB_HOST: couchdb
      DB_USER: admin
      DB_PASSWORD: admin
    volumes:
      - ./wait-for-it.sh:/app/wait-for-it.sh
    # Waiting for database start
    command: ["/app/wait-for-it.sh", "couchdb:5984", "--", "python", "./main.py" ]
    depends_on:
      - couchdb
    restart: on-failure

  #######################################################
  ##    Applications
  #######################################################

  # Alarm clock. Speaks phrases at the specified time.
  # It's a default example application to demonstrate how the entire system works
  app-time-notify:
    build: app-time-notify
    environment:
      SPEAKER_API_URL: http://speaker:8080
      CONFIG_API_URL: http://config-provider:8080
    depends_on:
      - config-provider
    restart: on-failure

volumes:
  couchdb_data:
